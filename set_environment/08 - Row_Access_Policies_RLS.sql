-- definindo as roles
USE ROLE ACCOUNTADMIN;
USE DATABASE DW_SALES1;

-- Cria um schema de security
CREATE OR REPLACE SCHEMA SECURITY;

-- Cria as roles para o teste
CREATE OR REPLACE ROLE SALES_ADMIN;
CREATE OR REPLACE ROLE SALES_FROM_NATION;
CREATE OR REPLACE ROLE SALES_FROM_REGION;

-- Aplica privilégios das roles criadas ao usuario
GRANT ROLE SALES_FROM_NATION TO USER rferreira;
GRANT ROLE SALES_FROM_REGION TO USER rferreira;
GRANT ROLE SALES_ADMIN TO USER rferreira;

-- criando tabela mapping
create OR REPLACE table SECURITY.salesregions (
  sales_roles varchar,
  region        varchar
);

-- inserindo dados tabela mapping
INSERT INTO SECURITY.SALESREGIONS VALUES ('SALES_FROM_REGION', 'AFRICA'), ('SALES_FROM_REGION', 'AMERICA'),  ('SALES_FROM_REGION', 'ASIA');

-- criando política de row access
CREATE OR REPLACE ROW ACCESS POLICY REGIONAL_ACCESS AS
(region_filter VARCHAR) RETURNS BOOLEAN ->
CURRENT_ROLE() = 'SALES_ADMIN'
OR EXISTS (
  SELECT 1 
  FROM SECURITY.SALESREGIONS
  WHERE region = region_filter
  AND sales_roles = CURRENT_ROLE()
);

-- associando privilégios
GRANT SELECT ON DW_SALES1.SALES1.REGION1     TO ROLE SALES_ADMIN;
GRANT SELECT ON DW_SALES1.SALES1.NATION1     TO ROLE SALES_ADMIN;
GRANT SELECT ON DW_SALES1.SALES1.SALES1      TO ROLE SALES_ADMIN;
GRANT SELECT ON DW_SALES1.SALES1.CUSTOMER1   TO ROLE SALES_ADMIN;
GRANT SELECT ON DW_SALES1.SALES1.FACT_SALES1 TO ROLE SALES_ADMIN;

GRANT SELECT ON DW_SALES1.SALES1.REGION1     TO ROLE SALES_FROM_REGION;
GRANT SELECT ON DW_SALES1.SALES1.NATION1     TO ROLE SALES_FROM_REGION;
GRANT SELECT ON DW_SALES1.SALES1.SALES1      TO ROLE SALES_FROM_REGION;
GRANT SELECT ON DW_SALES1.SALES1.CUSTOMER1   TO ROLE SALES_FROM_REGION;
GRANT SELECT ON DW_SALES1.SALES1.FACT_SALES1 TO ROLE SALES_FROM_REGION;

GRANT ALL ON WAREHOUSE LARGE_WH           TO ROLE SALES_ADMIN;
GRANT ALL ON DATABASE DW_SALES1           TO ROLE SALES_ADMIN;
GRANT ALL ON SCHEMA DW_SALES1.SALES1      TO ROLE SALES_ADMIN;

GRANT ALL ON WAREHOUSE LARGE_WH           TO ROLE SALES_FROM_REGION;
GRANT ALL ON DATABASE DW_SALES1           TO ROLE SALES_FROM_REGION;
GRANT ALL ON SCHEMA DW_SALES1.SALES1      TO ROLE SALES_FROM_REGION;

-- Aplica a police na tabela
ALTER TABLE DW_SALES1.SALES1.REGION1 DROP ROW ACCESS POLICY REGIONAL_ACCESS;
ALTER TABLE DW_SALES1.SALES1.REGION1 ADD ROW ACCESS POLICY REGIONAL_ACCESS ON (R_NAME);

USE WAREHOUSE LARGE_WH;

-- testes de query para aplicação da policies
USE ROLE ACCOUNTADMIN;
SELECT CURRENT_ROLE();
SELECT * FROM DW_SALES1.SALES1.REGION1;

USE ROLE SALES_ADMIN;
SELECT CURRENT_ROLE();
SELECT * FROM DW_SALES1.SALES1.REGION1;

USE ROLE SALES_FROM_REGION;
SELECT CURRENT_ROLE();
SELECT * FROM DW_SALES1.SALES1.REGION1;

-- Select com join para verificar o uso da policie
SELECT
  R.R_NAME,
  SUM(S.O_TOTALPRICE) AS TOTALSALES
FROM
  DW_SALES1.SALES1.SALES1 S JOIN
  DW_SALES1.SALES1.CUSTOMER1 C ON (S.O_CUSTKEY = C.C_CUSTKEY) JOIN
  DW_SALES1.SALES1.NATION1 N ON (C.C_NATIONKEY = N.N_NATIONKEY) JOIN
  DW_SALES1.SALES1.REGION1 R ON (R.R_REGIONKEY = N.N_REGIONKEY)
GROUP BY R.R_NAME;

SELECT COUNT(*) FROM DW_SALES1.SALES1.FACT_SALES1 S;

-- Alterando a forma, pois pode ser dado um select direto na fato.
USE ROLE ACCOUNTADMIN;
USE SCHEMA SECURITY;

ALTER TABLE DW_SALES1.SALES1.REGION1 DROP ROW ACCESS POLICY REGIONAL_ACCESS; ON (R_NAME);

-- Cria uma nova RA mais detalhada
CREATE OR REPLACE ROW ACCESS POLICY SALES_ACCESS AS
(O_CUSTKEY_FILTER NUMBER(38,0)) RETURNS BOOLEAN ->
CURRENT_ROLE() = 'SALES_ADMIN'
OR EXISTS (
  SELECT 1
  FROM 
     DW_SALES1.SALES1.CUSTOMER1 C JOIN
     DW_SALES1.SALES1.NATION1 N ON (C.C_NATIONKEY = N.N_NATIONKEY) JOIN
     DW_SALES1.SALES1.REGION1 R ON (R.R_REGIONKEY = N.N_REGIONKEY) JOIN
     SECURITY.SALESREGIONS S ON (S.region = R.R_NAME) 
  WHERE C.C_CUSTKEY = O_CUSTKEY_FILTER
        AND sales_roles = CURRENT_ROLE());

-- aplicando a política na tabela
ALTER TABLE DW_SALES1.SALES1.FACT_SALES1 ADD ROW ACCESS POLICY SALES_ACCESS ON (CUSTKEY);
--ALTER TABLE ROW_ACCESS_POLICIES.PUBLIC.REGION DROP ROW ACCESS POLICY REGIONAL_ACCESS; ON (R_NAME);
--ALTER TABLE DW_SALES1.SALES1.FACT_SALES1  DROP ROW ACCESS POLICY SALES_ACCESS; ON (CUSTKEY);

-- testes de query para aplicação da policies
USE ROLE ACCOUNTADMIN;
SELECT CURRENT_ROLE();
SELECT count(*) FROM DW_SALES1.SALES1.FACT_SALES1;

USE ROLE SALES_ADMIN;
SELECT CURRENT_ROLE();
SELECT COUNT(*) FROM DW_SALES1.SALES1.FACT_SALES1;

USE ROLE SALES_FROM_REGION;
SELECT CURRENT_ROLE();
SELECT COUNT(*) FROM DW_SALES1.SALES1.FACT_SALES1;

SELECT
  R.R_NAME,
  SUM(S.TOTALPRICE) AS TOTALSALES
FROM
  DW_SALES1.SALES1.FACT_SALES1 S JOIN
  DW_SALES1.SALES1.CUSTOMER1 C ON (S.CUSTKEY = C.C_CUSTKEY) JOIN
  DW_SALES1.SALES1.NATION1 N ON (C.C_NATIONKEY = N.N_NATIONKEY) JOIN
  DW_SALES1.SALES1.REGION1 R ON (R.R_REGIONKEY = N.N_REGIONKEY)
GROUP BY R.R_NAME;